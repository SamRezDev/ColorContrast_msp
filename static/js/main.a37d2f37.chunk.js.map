{"version":3,"sources":["container/TileContainer.js","App.js","reportWebVitals.js","index.js"],"names":["TileContainer","props","useState","HexCode","setHexCode","TextColor","setTextColor","GenerateHexCode","randomColor","Math","floor","random","toString","console","log","hexcolor","replace","r","parseInt","substr","g","b","getContrastYIQ","useEffect","className","style","backgroundColor","border","color","onClick","RemoveContainer","id","App","ContainerArray","setContainerArray","AddElement","setAddElement","IdRemoved","filter","element","uniqid","Date","now","array","push","AddContainer","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAGe,SAASA,EAAcC,GAClC,MAA8BC,mBAAS,WAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAaA,SAASC,IACL,IAAMC,EAAcC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAChER,EAAW,IAAII,GAChBK,QAAQC,IAAIX,GAXnB,SAAwBY,GACpBA,EAAWA,EAASC,QAAQ,IAAK,IACjC,IAAIC,EAAIC,SAASH,EAASI,OAAO,EAAE,GAAG,IAClCC,EAAIF,SAASH,EAASI,OAAO,EAAE,GAAG,IAClCE,EAAIH,SAASH,EAASI,OAAO,EAAE,GAAG,IAEjBb,GADP,IAAFW,EAAU,IAAFG,EAAU,IAAFC,GAAQ,KACrB,IAAmB,OAAwB,WAMvDC,CAAenB,GAGpB,OAnBFoB,qBAAU,WACNhB,MACD,IAiBM,sBAAKiB,UAAU,gBAAgBC,MAAO,CAAEC,gBAAkBvB,GAA1D,UACH,sBAAKqB,UAAU,qBAAf,cAAqC,wBAAQA,UAAU,cAAgBC,MAAO,CAACE,OAAQ,OAAQC,MAAOzB,EAASuB,gBAAkBrB,GACjIwB,QAAS,kBAAK5B,EAAM6B,gBAAgB7B,EAAM8B,KADL,gBAArC,OAEA,sBAAKP,UAAU,gBAAf,UAEA,sBAAKA,UAAU,iBAAiBC,MAAO,CAACG,MAAQvB,GAAhD,cAA+DF,KACjE,wBAAQqB,UAAU,iBAAkBC,MAAO,CAACE,OAAQ,OAAQC,MAAOzB,EAASuB,gBAAkBrB,GAC5FwB,QAAS,kBAAItB,KADf,kCCCWyB,MA7Bf,WACE,MAA4C9B,mBAAS,IAArD,mBAAO+B,EAAP,KAAuBC,EAAvB,KACA,EAAoChC,qBAApC,mBAAOiC,EAAP,KAAmBC,EAAnB,KAWF,SAASN,EAAgBO,GACxBH,EAAmBD,EAAeK,QAAO,SAACC,GACvC,OAAOF,IAAcE,EAAQR,OAE/BlB,QAAQC,IAAImB,GAEZ,OAhBAV,qBAAU,YAGZ,WACE,IAAIiB,EAASC,KAAKC,MACdC,EAAOV,EACXU,EAAMC,KAAK,CAACb,GAAIS,IAChBN,EAAkBS,GAClB9B,QAAQC,IAAImB,GAPVY,KACC,CAACV,IAeF,sBAAKX,UAAU,MAAf,UACE,wBAAQA,UAAU,qBAAqBK,QAAS,kBAAiBO,GAAXD,IAAtD,gBACCF,EAAea,KAAK,SAACP,GAAa,OAAO,cAAC,EAAD,CAAgCR,GAAIQ,EAAQR,GAAID,gBAAiBA,GAA7CS,EAAQR,WCb7DgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a37d2f37.chunk.js","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport GenerateColorButton from \"../components/GenerateColorButton\";\r\nimport \"./TileContainer.css\"\r\nexport default function TileContainer(props) {\r\n    const [HexCode, setHexCode] = useState(\"#a663c5\")\r\n    const [TextColor, setTextColor] = useState(\"\")\r\nuseEffect(() => {\r\n    GenerateHexCode()\r\n}, [])\r\n\r\nfunction getContrastYIQ(hexcolor){\r\n    hexcolor = hexcolor.replace(\"#\", \"\");\r\n    var r = parseInt(hexcolor.substr(0,2),16);\r\n    var g = parseInt(hexcolor.substr(2,2),16);\r\n    var b = parseInt(hexcolor.substr(4,2),16);\r\n    var yiq = ((r*299)+(g*587)+(b*114))/1000;\r\n    return (yiq >= 128) ?setTextColor(\"#000\") :  setTextColor(\"#FFFFFF\")\r\n}\r\n    function GenerateHexCode (){\r\n        const randomColor = Math.floor(Math.random()*16777215).toString(16);\r\n        setHexCode(\"#\"+randomColor)\r\n       console.log(HexCode)\r\n       getContrastYIQ(HexCode)\r\n      }\r\n    \r\n  return <div className=\"TileContainer\" style={{ backgroundColor : HexCode}}>\r\n      <div className=\"SecondaryContainer\"> <button className=\"CloseButton\"   style={{border: \"none\", color: HexCode, backgroundColor : TextColor}}\r\n      onClick={() =>props.RemoveContainer(props.id)} > X</button> </div>\r\n      <div className=\"MainContainer\">\r\n      \r\n      <div className=\"HexCodeSection\" style={{color : TextColor\t}}> {HexCode}</div>\r\n    <button className=\"GenColorButton\"  style={{border: \"none\", color: HexCode, backgroundColor : TextColor}}\r\n      onClick={()=>GenerateHexCode()}>GENERATE COLOR</button> \r\n\r\n</div>\r\n\r\n  </div>;\r\n\r\n}","import \"./App.css\";\nimport { useState,useEffect } from \"react\";\nimport TileContainer from \"./container/TileContainer\";\nfunction App() {\n  const [ContainerArray, setContainerArray] = useState([]);\n  const [AddElement, setAddElement] = useState()\n  useEffect(() => {\n    AddContainer()\n  }, [AddElement])\nfunction AddContainer(){\n  var uniqid = Date.now();\n  var array= ContainerArray ;\n  array.push({id :uniqid})\n  setContainerArray(array)\n  console.log(ContainerArray)\n}\nfunction RemoveContainer(IdRemoved){\n setContainerArray( ContainerArray.filter((element) => {\n    return IdRemoved !== element.id;\n  }))\n  console.log(ContainerArray)\n}\n  return (\n    <div className=\"App\">\n      <button className='AddContainerButton' onClick={() => AddElement?setAddElement(false):setAddElement(true)}> +</button>\n      {ContainerArray.map( (element) => {return <TileContainer key={element.id} id={element.id} RemoveContainer={RemoveContainer} />} ) }\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}