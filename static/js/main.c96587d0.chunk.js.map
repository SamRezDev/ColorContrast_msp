{"version":3,"sources":["components/TileContainer.js","App.js","reportWebVitals.js","index.js"],"names":["TileContainer","props","useState","HexCode","setHexCode","TextColor","setTextColor","GenerateHexCode","randomColor","Math","floor","random","toString","console","log","hexcolor","replace","r","parseInt","substr","g","b","getContrastYIQ","useEffect","className","style","backgroundColor","border","color","onClick","RemoveContainer","id","App","ContainerArray","setContainerArray","AddElement","setAddElement","IdRemoved","filter","element","uniqid","Date","now","array","push","AddContainer","title","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAGe,SAASA,EAAcC,GACpC,MAA8BC,mBAAS,WAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAaA,SAASC,IACP,IAAMC,EAAcC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAClER,EAAW,IAAMI,GACjBK,QAAQC,IAAIX,GAXd,SAAwBY,GACtBA,EAAWA,EAASC,QAAQ,IAAK,IACjC,IAAIC,EAAIC,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCC,EAAIF,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCE,EAAIH,SAASH,EAASI,OAAO,EAAG,GAAI,IAEpBb,GADL,IAAJW,EAAc,IAAJG,EAAc,IAAJC,GAAW,KAC5B,IAAmB,OAAuB,WAMxDC,CAAenB,GAGjB,OAnBAoB,qBAAU,WACRhB,MACC,IAkBD,sBAAKiB,UAAU,gBAAgBC,MAAO,CAAEC,gBAAiBvB,GAAzD,UACE,sBAAKqB,UAAU,qBAAf,UACG,IACD,yBACEA,UAAU,cACVC,MAAO,CAAEE,OAAQ,OAAQC,MAAOzB,EAASuB,gBAAiBrB,GAC1DwB,QAAS,kBAAM5B,EAAM6B,gBAAgB7B,EAAM8B,KAH7C,UAKG,IALH,OAOU,OAEZ,sBAAKP,UAAU,gBAAf,UACE,sBAAKA,UAAU,iBAAiBC,MAAO,CAAEG,MAAOvB,GAAhD,UACG,IACAF,KAEH,wBACEqB,UAAU,iBACVC,MAAO,CAAEE,OAAQ,OAAQC,MAAOzB,EAASuB,gBAAiBrB,GAC1DwB,QAAS,kBAAMtB,KAHjB,kCCVOyB,MA9Bf,WACE,MAA4C9B,mBAAS,IAArD,mBAAO+B,EAAP,KAAuBC,EAAvB,KACA,EAAoChC,oBAAS,GAA7C,mBAAOiC,EAAP,KAAmBC,EAAnB,KAYF,SAASN,EAAgBO,GACxBH,EAAmBD,EAAeK,QAAO,SAACC,GACvC,OAAOF,IAAcE,EAAQR,OAE/BlB,QAAQC,IAAImB,GAEZ,OAjBAV,qBAAU,WACRY,GAGJ,WACE,IAAIK,EAASC,KAAKC,MACdC,EAAOV,EACXU,EAAMC,KAAK,CAACb,GAAIS,IAChBN,EAAkBS,GAClB9B,QAAQC,IAAImB,GARGY,KAEZ,CAACV,IAeF,sBAAKX,UAAU,MAAf,UACE,wBAAQsB,MAAM,mBAAmBtB,UAAU,qBAAqBK,QAAS,kBAAiBO,GAAXD,IAA/E,gBACCF,EAAec,KAAK,SAACR,GAAa,OAAO,cAAC,EAAD,CAAgCR,GAAIQ,EAAQR,GAAID,gBAAiBA,GAA7CS,EAAQR,WCd7DiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c96587d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./TileContainer.css\";\r\nexport default function TileContainer(props) {\r\n  const [HexCode, setHexCode] = useState(\"#a663c5\");\r\n  const [TextColor, setTextColor] = useState(\"\");\r\n  useEffect(() => {\r\n    GenerateHexCode();\r\n  }, []);\r\n\r\n  function getContrastYIQ(hexcolor) {\r\n    hexcolor = hexcolor.replace(\"#\", \"\");\r\n    var r = parseInt(hexcolor.substr(0, 2), 16);\r\n    var g = parseInt(hexcolor.substr(2, 2), 16);\r\n    var b = parseInt(hexcolor.substr(4, 2), 16);\r\n    var yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n    return yiq >= 128 ? setTextColor(\"#000\") : setTextColor(\"#FFFFFF\");\r\n  }\r\n  function GenerateHexCode() {\r\n    const randomColor = Math.floor(Math.random() * 16777215).toString(16);\r\n    setHexCode(\"#\" + randomColor);\r\n    console.log(HexCode);\r\n    getContrastYIQ(HexCode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"TileContainer\" style={{ backgroundColor: HexCode }}>\r\n      <div className=\"SecondaryContainer\">\r\n        {\" \"}\r\n        <button\r\n          className=\"CloseButton\"\r\n          style={{ border: \"none\", color: HexCode, backgroundColor: TextColor }}\r\n          onClick={() => props.RemoveContainer(props.id)}\r\n        >\r\n          {\" \"}\r\n          X\r\n        </button>{\" \"}\r\n      </div>\r\n      <div className=\"MainContainer\">\r\n        <div className=\"HexCodeSection\" style={{ color: TextColor }}>\r\n          {\" \"}\r\n          {HexCode}\r\n        </div>\r\n        <button\r\n          className=\"GenColorButton\"\r\n          style={{ border: \"none\", color: HexCode, backgroundColor: TextColor }}\r\n          onClick={() => GenerateHexCode()}\r\n        >\r\n          GENERATE COLOR\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { useState,useEffect } from \"react\";\nimport TileContainer from \"./components/TileContainer\";\nfunction App() {\n  const [ContainerArray, setContainerArray] = useState([]);\n  const [AddElement, setAddElement] = useState(false)\n  useEffect(() => {\n    AddElement&& AddContainer()\n    \n  }, [AddElement])\nfunction AddContainer(){\n  var uniqid = Date.now();\n  var array= ContainerArray ;\n  array.push({id :uniqid})\n  setContainerArray(array)\n  console.log(ContainerArray)\n}\nfunction RemoveContainer(IdRemoved){\n setContainerArray( ContainerArray.filter((element) => {\n    return IdRemoved !== element.id;\n  }))\n  console.log(ContainerArray)\n}\n  return (\n    <div className=\"App\">\n      <button title=\"Double click it!\" className='AddContainerButton' onClick={() => AddElement?setAddElement(false):setAddElement(true)}> +</button>\n      {ContainerArray.map( (element) => {return <TileContainer key={element.id} id={element.id} RemoveContainer={RemoveContainer} />} ) }\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}